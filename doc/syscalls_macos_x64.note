[0, AUE_NULL,{ int nosys(void); }, { indirect syscall }],
[1, AUE_EXIT,{ void exit(int rval); }],
[2, AUE_FORK,{ int fork(void); }],
[3, AUE_NULL,{ user_ssize_t read(int fd, user_addr_t cbuf, user_size_t nbyte); }],
[4, AUE_NULL,{ user_ssize_t write(int fd, user_addr_t cbuf, user_size_t nbyte); }],
[5, AUE_OPEN_RWTC,{ int open(user_addr_t path, int flags, int mode); }],
[6, AUE_CLOSE,{ int close(int fd); }],
[7, AUE_WAIT4,{ int wait4(int pid, user_addr_t status, int options, user_addr_t rusage); }],
[8, AUE_NULL,{ int nosys(void); }, { old creat }],
[9, AUE_LINK,{ int link(user_addr_t path, user_addr_t link); }],
[10, AUE_UNLINK,{ int unlink(user_addr_t path); }],
[11, AUE_NULL,{ int nosys(void); }, { old execv }],
[12, AUE_CHDIR,{ int chdir(user_addr_t path); }],
[13, AUE_FCHDIR,{ int fchdir(int fd); }],
[14, AUE_MKNOD,{ int mknod(user_addr_t path, int mode, int dev); }],
[15, AUE_CHMOD,{ int chmod(user_addr_t path, int mode); }],
[16, AUE_CHOWN,{ int chown(user_addr_t path, int uid, int gid); }],
[17, AUE_NULL,{ int nosys(void); }, { old break }],
[18, AUE_GETFSSTAT,{ int getfsstat(user_addr_t buf, int bufsize, int flags); }],
[19, AUE_NULL,{ int nosys(void); }, { old lseek }],
[20, AUE_GETPID,{ int getpid(void); }],
[21, AUE_NULL,{ int nosys(void); }, { old mount }],
[22, AUE_NULL,{ int nosys(void); }, { old umount }],
[23, AUE_SETUID,{ int setuid(uid_t uid); }],
[24, AUE_GETUID,{ int getuid(void); }],
[25, AUE_GETEUID,{ int geteuid(void); }],
[26, AUE_PTRACE,{ int ptrace(int req, pid_t pid, caddr_t addr, int data); }],
[27, AUE_RECVMSG,{ int recvmsg(int s, struct msghdr *msg, int flags); }],
[28, AUE_SENDMSG,{ int sendmsg(int s, caddr_t msg, int flags); }],
[29, AUE_RECVFROM,{ int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr); }],
[30, AUE_ACCEPT,{ int accept(int s, caddr_t name, socklen_t	*anamelen); }],
[31, AUE_GETPEERNAME,{ int getpeername(int fdes, caddr_t asa, socklen_t *alen); }],
[32, AUE_GETSOCKNAME,{ int getsockname(int fdes, caddr_t asa, socklen_t *alen); }],
[33, AUE_ACCESS,{ int access(user_addr_t path, int flags); }],
[34, AUE_CHFLAGS,{ int chflags(char *path, int flags); }],
[35, AUE_FCHFLAGS,{ int fchflags(int fd, int flags); }],
[36, AUE_SYNC,{ int sync(void); }],
[37, AUE_KILL,{ int kill(int pid, int signum, int posix); }],
[38, AUE_NULL,{ int nosys(void); }, { old stat  }],
[39, AUE_GETPPID,{ int getppid(void); }],
[40, AUE_NULL,{ int nosys(void); }, { old lstat }],
[41, AUE_DUP,{ int dup(u_int fd); }],
[42, AUE_PIPE,{ int pipe(void); }],
[43, AUE_GETEGID,{ int getegid(void); }],
[44, AUE_PROFILE,{ int profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }],
[45, AUE_NULL,{ int nosys(void); }, { old ktrace }],
[46, AUE_SIGACTION,{ int sigaction(int signum, struct __sigaction *nsa, struct sigaction *osa); }],
[47, AUE_GETGID,{ int getgid(void); }],
[48, AUE_SIGPROCMASK,{ int sigprocmask(int how, user_addr_t mask, user_addr_t omask); }],
[49, AUE_GETLOGIN,{ int getlogin(char *namebuf, u_int namelen); }],
[50, AUE_SETLOGIN,{ int setlogin(char *namebuf); }],
[51, AUE_ACCT,{ int acct(char *path); }],
[52, AUE_SIGPENDING,{ int sigpending(struct sigvec *osv); }],
[53, AUE_SIGALTSTACK,{ int sigaltstack(struct sigaltstack *nss, struct sigaltstack *oss); }],
[54, AUE_IOCTL,{ int ioctl(int fd, u_long com, caddr_t data); }],
[55, AUE_REBOOT,{ int reboot(int opt, char *command); }],
[56, AUE_REVOKE,{ int revoke(char *path); }],
[57, AUE_SYMLINK,{ int symlink(char *path, char *link); }],
[58, AUE_READLINK,{ int readlink(char *path, char *buf, int count); }],
[59, AUE_EXECVE,{ int execve(char *fname, char **argp, char **envp); }],
[60, AUE_UMASK,{ int umask(int newmask); }],
[61, AUE_CHROOT,{ int chroot(user_addr_t path); }],
[62, AUE_NULL,{ int nosys(void); }, { old fstat }],
[63, AUE_NULL,{ int nosys(void); }, { used internally, reserved }],
[64, AUE_NULL,{ int nosys(void); }, { old getpagesize }],
[65, AUE_MSYNC,{ int msync(caddr_t addr, size_t len, int flags); }],
[66, AUE_VFORK,{ int vfork(void); }],
[67, AUE_NULL,{ int nosys(void); }, { old vread }],
[68, AUE_NULL,{ int nosys(void); }, { old vwrite }],
[69, AUE_NULL,{ int nosys(void); }, { old sbrk }],
[70, AUE_NULL,{ int nosys(void); }, { old sstk }],
[71, AUE_NULL,{ int nosys(void); }, { old mmap }],
[72, AUE_NULL,{ int nosys(void); }, { old vadvise }],
[73, AUE_MUNMAP,{ int munmap(caddr_t addr, size_t len); }],
[74, AUE_MPROTECT,{ int mprotect(caddr_t addr, size_t len, int prot); }],
[75, AUE_MADVISE,{ int madvise(caddr_t addr, size_t len, int behav); }],
[76, AUE_NULL,{ int nosys(void); }, { old vhangup }],
[77, AUE_NULL,{ int nosys(void); }, { old vlimit }],
[78, AUE_MINCORE,{ int mincore(user_addr_t addr, user_size_t len, user_addr_t vec); }],
[79, AUE_GETGROUPS,{ int getgroups(u_int gidsetsize, gid_t *gidset); }],
[80, AUE_SETGROUPS,{ int setgroups(u_int gidsetsize, gid_t *gidset); }],
[81, AUE_GETPGRP,{ int getpgrp(void); }],
[82, AUE_SETPGRP,{ int setpgid(int pid, int pgid); }],
[83, AUE_SETITIMER,{ int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }],
[84, AUE_NULL,{ int nosys(void); }, { old wait }],
[85, AUE_SWAPON,{ int swapon(void); }],
[86, AUE_GETITIMER,{ int getitimer(u_int which, struct itimerval *itv); }],
[87, AUE_NULL,{ int nosys(void); }, { old gethostname }],
[88, AUE_NULL,{ int nosys(void); }, { old sethostname }],
[89, AUE_GETDTABLESIZE,{ int getdtablesize(void); }],
[90, AUE_DUP2,{ int dup2(u_int from, u_int to); }],
[91, AUE_NULL,{ int nosys(void); }, { old getdopt }],
[92, AUE_FCNTL,{ int fcntl(int fd, int cmd, long arg); }],
[93, AUE_SELECT,{ int select(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv); }],
[94, AUE_NULL,{ int nosys(void); }, { old setdopt }],
[95, AUE_FSYNC,{ int fsync(int fd); }],
[96, AUE_SETPRIORITY,{ int setpriority(int which, id_t who, int prio); }],
[97, AUE_SOCKET,{ int socket(int domain, int type, int protocol); }],
[98, AUE_CONNECT,{ int connect(int s, caddr_t name, socklen_t namelen); }],
[99, AUE_NULL,{ int nosys(void); }, { old accept }],
[100, AUE_GETPRIORITY,{ int getpriority(int which, id_t who); }],
[101, AUE_NULL,{ int nosys(void); }, { old send }],
[102, AUE_NULL,{ int nosys(void); }, { old recv }],
[103, AUE_NULL,{ int nosys(void); }, { old sigreturn }],
[104, AUE_BIND,{ int bind(int s, caddr_t name, socklen_t namelen); }],
[105, AUE_SETSOCKOPT,{ int setsockopt(int s, int level, int name, caddr_t val, socklen_t valsize); }],
[106, AUE_LISTEN,{ int listen(int s, int backlog); }],
[107, AUE_NULL,{ int nosys(void); }, { old vtimes }],
[108, AUE_NULL,{ int nosys(void); }, { old sigvec }],
[109, AUE_NULL,{ int nosys(void); }, { old sigblock }],
[110, AUE_NULL,{ int nosys(void); }, { old sigsetmask }],
[111, AUE_NULL,{ int sigsuspend(sigset_t mask); }],
[112, AUE_NULL,{ int nosys(void); }, { old sigstack }],
[113, AUE_NULL,{ int nosys(void); }, { old recvmsg }],
[114, AUE_NULL,{ int nosys(void); }, { old sendmsg }],
[115, AUE_NULL,{ int nosys(void); }, { old vtrace }],
[116, AUE_GETTIMEOFDAY,{ int gettimeofday(struct timeval *tp, struct timezone *tzp); }],
[117, AUE_GETRUSAGE,{ int getrusage(int who, struct rusage *rusage); }],
[118, AUE_GETSOCKOPT,{ int getsockopt(int s, int level, int name, caddr_t val, socklen_t *avalsize); }],
[119, AUE_NULL,{ int nosys(void); }, { old resuba }],
[120, AUE_READV,{ user_ssize_t readv(int fd, struct iovec *iovp, u_int iovcnt); }],
[121, AUE_WRITEV,{ user_ssize_t writev(int fd, struct iovec *iovp, u_int iovcnt); }],
[122, AUE_SETTIMEOFDAY,{ int settimeofday(struct timeval *tv, struct timezone *tzp); }],
[123, AUE_FCHOWN,{ int fchown(int fd, int uid, int gid); }],
[124, AUE_FCHMOD,{ int fchmod(int fd, int mode); }],
[125, AUE_NULL,{ int nosys(void); }, { old recvfrom }],
[126, AUE_SETREUID,{ int setreuid(uid_t ruid, uid_t euid); }],
[127, AUE_SETREGID,{ int setregid(gid_t rgid, gid_t egid); }],
[128, AUE_RENAME,{ int rename(char *from, char *to); }],
[129, AUE_NULL,{ int nosys(void); }, { old truncate }],
[130, AUE_NULL,{ int nosys(void); }, { old ftruncate }],
[131, AUE_FLOCK,{ int flock(int fd, int how); }],
[132, AUE_MKFIFO,{ int mkfifo(user_addr_t path, int mode); }],
[133, AUE_SENDTO,{ int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen); }],
[134, AUE_SHUTDOWN,{ int shutdown(int s, int how); }],
[135, AUE_SOCKETPAIR,{ int socketpair(int domain, int type, int protocol, int *rsv); }],
[136, AUE_MKDIR,{ int mkdir(user_addr_t path, int mode); }],
[137, AUE_RMDIR,{ int rmdir(char *path); }],
[138, AUE_UTIMES,{ int utimes(char *path, struct timeval *tptr); }],
[139, AUE_FUTIMES,{ int futimes(int fd, struct timeval *tptr); }],
[140, AUE_ADJTIME,{ int adjtime(struct timeval *delta, struct timeval *olddelta); }],
[141, AUE_NULL,{ int nosys(void); }, { old getpeername }],
[142, AUE_SYSCTL,{ int gethostuuid(unsigned char *uuid_buf, const struct timespec *timeoutp); }],
[143, AUE_NULL,{ int nosys(void); }, { old sethostid 	}],
[144, AUE_NULL,{ int nosys(void); }, { old getrlimit }],
[145, AUE_NULL,{ int nosys(void); }, { old setrlimit }],
[146, AUE_NULL,{ int nosys(void); }, { old killpg }],
[147, AUE_SETSID,{ int setsid(void); }],
[148, AUE_NULL,{ int nosys(void); }, { old setquota }],
[149, AUE_NULL,{ int nosys(void); }, { old qquota }],
[150, AUE_NULL,{ int nosys(void); }, { old getsockname }],
[151, AUE_GETPGID,{ int getpgid(pid_t pid); }],
[152, AUE_SETPRIVEXEC,{ int setprivexec(int flag); }],
[153, AUE_PREAD,{ user_ssize_t pread(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }],
[154, AUE_PWRITE,{ user_ssize_t pwrite(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }],
[155, AUE_NFS_SVC,{ int nfssvc(int flag, caddr_t argp); }],
[156, AUE_NULL,{ int nosys(void); }, { old getdirentries }],
[157, AUE_STATFS,{ int statfs(char *path, struct statfs *buf); }],
[158, AUE_FSTATFS,{ int fstatfs(int fd, struct statfs *buf); }],
[159, AUE_UNMOUNT,{ int unmount(user_addr_t path, int flags); }],
[160, AUE_NULL,{ int nosys(void); }, { old async_daemon }],
[161, AUE_NFS_GETFH,{ int getfh(char *fname, fhandle_t *fhp); }],
[162, AUE_NULL,{ int nosys(void); }, { old getdomainname }],
[163, AUE_NULL,{ int nosys(void); }, { old setdomainname }],
[164, AUE_NULL,{ int nosys(void); }],
[165, AUE_QUOTACTL,{ int quotactl(const char *path, int cmd, int uid, caddr_t arg); }],
[166, AUE_NULL,{ int nosys(void); }, { old exportfs }],
[167, AUE_MOUNT,{ int mount(char *type, char *path, int flags, caddr_t data); }],
[168, AUE_NULL,{ int nosys(void); }, { old ustat }],
[169, AUE_CSOPS,{ int csops(pid_t pid, uint32_t ops, user_addr_t useraddr, user_size_t usersize); }],
[170, AUE_NULL	HN	{ int nosys(void); }, { old table }
[171, AUE_NULL,{ int nosys(void); }, { old wait3 }],
[172, AUE_NULL,{ int nosys(void); }, { old rpause	}],
[173, AUE_WAITID,{ int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options); }],
[174, AUE_NULL,{ int nosys(void); }, { old getdents }],
[175, AUE_NULL,{ int nosys(void); }, { old gc_control }],
[176, AUE_ADDPROFILE,{ int add_profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }],
[177, AUE_NULL,{ int nosys(void); }],
[178, AUE_NULL,{ int nosys(void); }],
[179, AUE_NULL,{ int nosys(void); }],
[180, AUE_KDEBUGTRACE,{ int kdebug_trace(int code, int arg1, int arg2, int arg3, int arg4, int arg5) NO_SYSCALL_STUB; }],
[181, AUE_SETGID,{ int setgid(gid_t gid); }],
[182, AUE_SETEGID,{ int setegid(gid_t egid); }],
[183, AUE_SETEUID,{ int seteuid(uid_t euid); }],
[184, AUE_SIGRETURN,{ int sigreturn(struct ucontext *uctx, int infostyle) NO_SYSCALL_STUB; }],
[185, AUE_CHUD,{ int chud(uint64_t code, uint64_t arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4, uint64_t arg5) NO_SYSCALL_STUB; }],
[186, AUE_NULL,{ int nosys(void); }],
[187, AUE_FDATASYNC,{ int fdatasync(int fd); }],
[188, AUE_STAT,{ int stat(user_addr_t path, user_addr_t ub); }],
[189, AUE_FSTAT,{ int fstat(int fd, user_addr_t ub); }],
[190, AUE_LSTAT,{ int lstat(user_addr_t path, user_addr_t ub); }],
[191, AUE_PATHCONF,{ int pathconf(char *path, int name); }],
[192, AUE_FPATHCONF,{ int fpathconf(int fd, int name); }],
[193, AUE_NULL,{ int nosys(void); }],
[194, AUE_GETRLIMIT,{ int getrlimit(u_int which, struct rlimit *rlp); }],
[195, AUE_SETRLIMIT,{ int setrlimit(u_int which, struct rlimit *rlp); }],
[196, AUE_GETDIRENTRIES,{ int getdirentries(int fd, char *buf, u_int count, long *basep); }],
[197, AUE_MMAP,{ user_addr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }],
[198, AUE_NULL,{ int nosys(void); }, { __syscall }],
[199, AUE_LSEEK,{ off_t lseek(int fd, off_t offset, int whence); }],
[200, AUE_TRUNCATE,{ int truncate(char *path, off_t length); }],
[201, AUE_FTRUNCATE,{ int ftruncate(int fd, off_t length); }],
[202, AUE_SYSCTL,{ int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }],
[203, AUE_MLOCK,{ int mlock(caddr_t addr, size_t len); }],
[204, AUE_MUNLOCK,{ int munlock(caddr_t addr, size_t len); }],
[205, AUE_UNDELETE,{ int undelete(user_addr_t path); }],
[206, AUE_ATSOCKET,{ int ATsocket(int proto); }],
[207, AUE_ATGETMSG,{ int ATgetmsg(int fd, void *ctlptr, void *datptr, int *flags); }],
[208, AUE_ATPUTMSG,{ int ATputmsg(int fd, void *ctlptr, void *datptr, int flags); }],
[209, AUE_ATPSNDREQ,{ int ATPsndreq(int fd, unsigned char *buf, int len, int nowait); }],
[210, AUE_ATPSNDRSP,{ int ATPsndrsp(int fd, unsigned char *respbuff, int resplen, int datalen); }],
[211, AUE_ATPGETREQ,{ int ATPgetreq(int fd, unsigned char *buf, int buflen); }],
[212, AUE_ATPGETRSP,{ int ATPgetrsp(int fd, unsigned char *bdsp); }],
[213, AUE_NULL,{ int nosys(void); }, { Reserved for AppleTalk }],
[214, AUE_NULL,{ int nosys(void); }],
[215, AUE_NULL,{ int nosys(void); }],
/*
; System Calls 216 - 230 are reserved for calls to support HFS/HFS Plus
; file system semantics. Currently, we only use 215-227.  The rest is
; for future expansion in anticipation of new MacOS APIs for HFS Plus.
; These calls are not conditionalized because while they are specific
; to HFS semantics, they are not specific to the HFS filesystem.
; We expect all filesystems to recognize the call and report that it is
; not supported or to actually implement it 
*/
[216, AUE_MKCOMPLEX,{ int mkcomplex(const char *path, mode_t mode, u_long type); }, { soon to be obsolete }],
[217, AUE_STATV,{ int statv(const char *path, struct vstat *vsb); }, { soon to be obsolete }],
[218, AUE_LSTATV,{ int lstatv(const char *path, struct vstat *vsb); }, { soon to be obsolete }],
[219, AUE_FSTATV,{ int fstatv(int fd, struct vstat *vsb); }, { soon to be obsolete }],
[220, AUE_GETATTRLIST,{ int getattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }],
[221, AUE_SETATTRLIST,{ int setattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }],
[222, AUE_GETDIRENTRIESATTR,{ int getdirentriesattr(int fd, struct attrlist *alist, void *buffer, size_t buffersize, u_long *count, u_long *basep, u_long *newstate, u_long options); }],
[223, AUE_EXCHANGEDATA,{ int exchangedata(const char *path1, const char *path2, u_long options); }],
[224, AUE_NULL,{ int nosys(void); }, { old checkuseraccess / fsgetpath (which moved to 427) }],
[225, AUE_SEARCHFS,{ int searchfs(const char *path, struct fssearchblock *searchblock, uint32_t *nummatches, uint32_t scriptcode, uint32_t options, struct searchstate *state); }],
[226, AUE_DELETE,{ int delete(user_addr_t path) NO_SYSCALL_STUB; }, { private delete (Carbon semantics) }],
[227, AUE_COPYFILE,{ int copyfile(char *from, char *to, int mode, int flags) NO_SYSCALL_STUB; }],
[228, AUE_FGETATTRLIST,{ int fgetattrlist(int fd, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }],
[229, AUE_FSETATTRLIST,{ int fsetattrlist(int fd, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }],
[230, AUE_POLL,{ int poll(struct pollfd *fds, u_int nfds, int timeout); }],
[231, AUE_WATCHEVENT,{ int watchevent(struct eventreq *u_req, int u_eventmask); }],
[232, AUE_WAITEVENT,{ int waitevent(struct eventreq *u_req, struct timeval *tv); }],
[233, AUE_MODWATCH,{ int modwatch(struct eventreq *u_req, int u_eventmask); }],
[234, AUE_GETXATTR,{ user_ssize_t getxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }],
[235, AUE_FGETXATTR,{ user_ssize_t fgetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }],
[236, AUE_SETXATTR,{ int setxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }],
[237, AUE_FSETXATTR,{ int fsetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }],
[238, AUE_REMOVEXATTR,{ int removexattr(user_addr_t path, user_addr_t attrname, int options); }],
[239, AUE_FREMOVEXATTR,{ int fremovexattr(int fd, user_addr_t attrname, int options); }],
[240, AUE_LISTXATTR,{ user_ssize_t listxattr(user_addr_t path, user_addr_t namebuf, size_t bufsize, int options); }],
[241, AUE_FLISTXATTR,{ user_ssize_t flistxattr(int fd, user_addr_t namebuf, size_t bufsize, int options); }],
[242, AUE_FSCTL,{ int fsctl(const char *path, u_long cmd, caddr_t data, u_int options); }],
[243, AUE_INITGROUPS,{ int initgroups(u_int gidsetsize, gid_t *gidset, int gmuid); }],
[244, AUE_POSIX_SPAWN,{ int posix_spawn(pid_t *pid, const char *path, const struct _posix_spawn_args_desc *adesc, char **argv, char **envp); }],
[245, AUE_FFSCTL,{ int ffsctl(int fd, u_long cmd, caddr_t data, u_int options); }],
[246, AUE_NULL,{ int nosys(void); }],
[247, AUE_NULL,{ int nfsclnt(int flag, caddr_t argp); }],
[248, AUE_FHOPEN,{ int fhopen(const struct fhandle *u_fhp, int flags); }],
[249, AUE_NULL,{ int nosys(void); }],
[250, AUE_MINHERIT,{ int minherit(void *addr, size_t len, int inherit); }],
[251, AUE_SEMSYS,{ int semsys(u_int which, int a2, int a3, int a4, int a5); }],
[252, AUE_MSGSYS,{ int msgsys(u_int which, int a2, int a3, int a4, int a5); }],
[253, AUE_SHMSYS,{ int shmsys(u_int which, int a2, int a3, int a4); }],
[254, AUE_SEMCTL,{ int semctl(int semid, int semnum, int cmd, semun_t arg); }],
[255, AUE_SEMGET,{ int semget(key_t key, int	nsems, int semflg); }],
[256, AUE_SEMOP,{ int semop(int semid, struct sembuf *sops, int nsops); }],
[257, AUE_NULL,{ int nosys(void); }],
[258, AUE_MSGCTL,{ int msgctl(int msqid, int cmd, struct	msqid_ds *buf); }],
[259, AUE_MSGGET,{ int msgget(key_t key, int msgflg); }],
[260, AUE_MSGSND,{ int msgsnd(int msqid, void *msgp, size_t msgsz, int msgflg); }],
[261, AUE_MSGRCV,{ user_ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }],
[262, AUE_SHMAT,{ user_addr_t shmat(int shmid, void *shmaddr, int shmflg); }],
[263, AUE_SHMCTL,{ int shmctl(int shmid, int cmd, struct shmid_ds *buf); }],
[264, AUE_SHMDT,{ int shmdt(void *shmaddr); }],
[265, AUE_SHMGET,{ int shmget(key_t key, size_t size, int shmflg); }],
[266, AUE_SHMOPEN,{ int shm_open(const char *name, int oflag, int mode); }],
[267, AUE_SHMUNLINK,{ int shm_unlink(const char *name); }],
[268, AUE_SEMOPEN,{ user_addr_t sem_open(const char *name, int oflag, int mode, int value); }],
[269, AUE_SEMCLOSE,{ int sem_close(sem_t *sem); }],
[270, AUE_SEMUNLINK,{ int sem_unlink(const char *name); }],
[271, AUE_SEMWAIT,{ int sem_wait(sem_t *sem); }],
[272, AUE_SEMTRYWAIT,{ int sem_trywait(sem_t *sem); }],
[273, AUE_SEMPOST,{ int sem_post(sem_t *sem); }],
[274, AUE_SEMGETVALUE,{ int sem_getvalue(sem_t *sem, int *sval); }],
[275, AUE_SEMINIT,{ int sem_init(sem_t *sem, int phsared, u_int value); }],
[276, AUE_SEMDESTROY,{ int sem_destroy(sem_t *sem); }],
[277, AUE_OPEN_EXTENDED_RWTC,{ int open_extended(user_addr_t path, int flags, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }],
[278, AUE_UMASK_EXTENDED,{ int umask_extended(int newmask, user_addr_t xsecurity) NO_SYSCALL_STUB; }],
[279, AUE_STAT_EXTENDED,{ int stat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }],
[280, AUE_LSTAT_EXTENDED,{ int lstat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }],
[281, AUE_FSTAT_EXTENDED,{ int fstat_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }],
[282, AUE_CHMOD_EXTENDED,{ int chmod_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }],
[283, AUE_FCHMOD_EXTENDED,{ int fchmod_extended(int fd, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }],
[284, AUE_ACCESS_EXTENDED,{ int access_extended(user_addr_t entries, size_t size, user_addr_t results, uid_t uid) NO_SYSCALL_STUB; }],
[285, AUE_SETTID,{ int settid(uid_t uid, gid_t gid) NO_SYSCALL_STUB; }],
[286, AUE_GETTID,{ int gettid(uid_t *uidp, gid_t *gidp) NO_SYSCALL_STUB; }],
[287, AUE_SETSGROUPS,{ int setsgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }],
[288, AUE_GETSGROUPS,{ int getsgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }],
[289, AUE_SETWGROUPS,{ int setwgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }],
[290, AUE_GETWGROUPS,{ int getwgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }],
[291, AUE_MKFIFO_EXTENDED,{ int mkfifo_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }],
[292, AUE_MKDIR_EXTENDED,{ int mkdir_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }],
[293, AUE_IDENTITYSVC,{ int identitysvc(int opcode, user_addr_t message) NO_SYSCALL_STUB; }],
[294, AUE_NULL,{ int shared_region_check_np(uint64_t *start_address) NO_SYSCALL_STUB; }],
[295, AUE_NULL,{ int shared_region_map_np(int fd, uint32_t count, const struct shared_file_mapping_np *mappings) NO_SYSCALL_STUB; }],
[296, AUE_NULL,{ int vm_pressure_monitor(int wait_for_pressure, int nsecs_monitored, uint32_t *pages_reclaimed); }],
[297, AUE_NULL,{ uint32_t psynch_rw_longrdlock(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }],
[298, AUE_NULL,{ uint32_t psynch_rw_yieldwrlock(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }],
[299, AUE_NULL,{ int psynch_rw_downgrade(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }],
[300, AUE_NULL,{ uint32_t psynch_rw_upgrade(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }],
[301, AUE_NULL,{ uint32_t psynch_mutexwait(user_addr_t mutex,  uint32_t mgen, uint32_t  ugen, uint64_t tid, uint32_t flags) NO_SYSCALL_STUB; }],
[302, AUE_NULL,{ uint32_t psynch_mutexdrop(user_addr_t mutex,  uint32_t mgen, uint32_t  ugen, uint64_t tid, uint32_t flags) NO_SYSCALL_STUB; }],
[303, AUE_NULL,{ int psynch_cvbroad(user_addr_t cv, uint32_t cvgen, uint32_t diffgen, user_addr_t mutex,  uint32_t mgen, uint32_t ugen, uint64_t tid, uint32_t flags) NO_SYSCALL_STUB; }],
[304, AUE_NULL,{ int psynch_cvsignal(user_addr_t cv, uint32_t cvgen, uint32_t cvugen, user_addr_t mutex,  uint32_t mgen, uint32_t ugen, int thread_port, uint32_t flags) NO_SYSCALL_STUB; }],
[305, AUE_NULL,{ uint32_t psynch_cvwait(user_addr_t cv, uint32_t cvgen, uint32_t cvugen, user_addr_t mutex,  uint32_t mgen, uint32_t ugen, uint64_t sec, uint64_t usec) NO_SYSCALL_STUB; }],
[306, AUE_NULL,{ uint32_t psynch_rw_rdlock(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }],
[307, AUE_NULL,{ uint32_t psynch_rw_wrlock(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }],
[308, AUE_NULL,{ uint32_t psynch_rw_unlock(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }],
[309, AUE_NULL,{ uint32_t psynch_rw_unlock2(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }],
[310, AUE_GETSID,{ int getsid(pid_t pid); }],
[311, AUE_SETTIDWITHPID,{ int settid_with_pid(pid_t pid, int assume) NO_SYSCALL_STUB; }],
[312, AUE_NULL,{ int nosys(void); }, { old __pthread_cond_timedwait }],
[313, AUE_NULL,{ int aio_fsync(int op, user_addr_t aiocbp); }],
[314, AUE_NULL,{ user_ssize_t aio_return(user_addr_t aiocbp); }],
[315, AUE_NULL,{ int aio_suspend(user_addr_t aiocblist, int nent, user_addr_t timeoutp); }],
[316, AUE_NULL,{ int aio_cancel(int fd, user_addr_t aiocbp); }],
[317, AUE_NULL,{ int aio_error(user_addr_t aiocbp); }],
[318, AUE_NULL,{ int aio_read(user_addr_t aiocbp); }],
[319, AUE_NULL,{ int aio_write(user_addr_t aiocbp); }],
[320, AUE_LIOLISTIO,{ int lio_listio(int mode, user_addr_t aiocblist, int nent, user_addr_t sigp); }],
[321, AUE_NULL,{ int nosys(void); }, { old __pthread_cond_wait }],
[322, AUE_IOPOLICYSYS,{ int iopolicysys(int cmd, void *arg) NO_SYSCALL_STUB; }],
[323, AUE_NULL,{ int nosys(void); }],
[324, AUE_MLOCKALL,{ int mlockall(int how); }],
[325, AUE_MUNLOCKALL,{ int munlockall(int how); }],
[326, AUE_NULL,{ int nosys(void); }],
[327, AUE_ISSETUGID,{ int issetugid(void); }],
[328, AUE_PTHREADKILL,{ int __pthread_kill(int thread_port, int sig); }],
[329, AUE_PTHREADSIGMASK,{ int __pthread_sigmask(int how, user_addr_t set, user_addr_t oset); }],
[330, AUE_SIGWAIT,{ int __sigwait(user_addr_t set, user_addr_t sig); }],
[331, AUE_NULL,{ int __disable_threadsignal(int value); }],
[332, AUE_NULL,{ int __pthread_markcancel(int thread_port); }],
[333, AUE_NULL,{ int __pthread_canceled(int  action); }],
[334, AUE_SEMWAITSIGNAL,{ int __semwait_signal(int cond_sem, int mutex_sem, int timeout, int relative, int64_t tv_sec, int32_t tv_nsec); }],
[335, AUE_NULL,{ int nosys(void); }, { old utrace }],
[336, AUE_PROCINFO,{ int proc_info(int32_t callnum,int32_t pid,uint32_t flavor, uint64_t arg,user_addr_t buffer,int32_t buffersize) NO_SYSCALL_STUB; }],
[337, AUE_SENDFILE,{ int sendfile(int fd, int s, off_t offset, off_t *nbytes, struct sf_hdtr *hdtr, int flags); }],
[338, AUE_STAT64,{ int stat64(user_addr_t path, user_addr_t ub); }],
[339, AUE_FSTAT64,{ int fstat64(int fd, user_addr_t ub); }],
[340, AUE_LSTAT64,{ int lstat64(user_addr_t path, user_addr_t ub); }],
[341, AUE_STAT64_EXTENDED,{ int stat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }],
[342, AUE_LSTAT64_EXTENDED,{ int lstat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }],
[343, AUE_FSTAT64_EXTENDED,{ int fstat64_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }],
[344, AUE_GETDIRENTRIES64,{ user_ssize_t getdirentries64(int fd, void *buf, user_size_t bufsize, off_t *position) NO_SYSCALL_STUB; }],
[345, AUE_STATFS64,{ int statfs64(char *path, struct statfs64 *buf); }],
[346, AUE_FSTATFS64,{ int fstatfs64(int fd, struct statfs64 *buf); }],
[347, AUE_GETFSSTAT64,{ int getfsstat64(user_addr_t buf, int bufsize, int flags); }],
[348, AUE_NULL,{ int __pthread_chdir(user_addr_t path); }],
[349, AUE_NULL,{ int __pthread_fchdir(int fd); }],
[350, AUE_AUDIT,{ int audit(void *record, int length); }],
[351, AUE_AUDITON,{ int auditon(int cmd, void *data, int length); }],
[352, AUE_NULL,{ int nosys(void); }],
[353, AUE_GETAUID,{ int getauid(au_id_t *auid); }],
[354, AUE_SETAUID,{ int setauid(au_id_t *auid); }],
[355, AUE_GETAUDIT,{ int getaudit(struct auditinfo *auditinfo); }],
[356, AUE_SETAUDIT,{ int setaudit(struct auditinfo *auditinfo); }],
[357, AUE_GETAUDIT_ADDR,{ int getaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }],
[358, AUE_SETAUDIT_ADDR,{ int setaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }],
[359, AUE_AUDITCTL,{ int auditctl(char *path); }],
[360, AUE_NULL,{ user_addr_t bsdthread_create(user_addr_t func, user_addr_t func_arg, user_addr_t stack, user_addr_t pthread, uint32_t flags) NO_SYSCALL_STUB; }],
[361, AUE_NULL,{ int bsdthread_terminate(user_addr_t stackaddr, size_t freesize, uint32_t port, uint32_t sem) NO_SYSCALL_STUB; }],
[362, AUE_KQUEUE,{ int kqueue(void); }],
[363, AUE_NULL,{ int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }],
[364, AUE_LCHOWN,{ int lchown(user_addr_t path, uid_t owner, gid_t group); }],
[365, AUE_STACKSNAPSHOT,{ int stack_snapshot(pid_t pid, user_addr_t tracebuf, uint32_t tracebuf_size, uint32_t flags, uint32_t dispatch_offset) NO_SYSCALL_STUB; }],
[366, AUE_NULL,{ int bsdthread_register(user_addr_t threadstart, user_addr_t wqthread, int pthsize,user_addr_t dummy_value, user_addr_t targetconc_ptr, uint64_t dispatchqueue_offset) NO_SYSCALL_STUB; }],
[367, AUE_WORKQOPEN,{ int workq_open(void) NO_SYSCALL_STUB; }],
[368, AUE_WORKQOPS,{ int workq_kernreturn(int options, user_addr_t item, int affinity, int prio) NO_SYSCALL_STUB; }],
[369, AUE_NULL,{ int kevent64(int fd, const struct kevent64_s *changelist, int nchanges, struct kevent64_s *eventlist, int nevents, unsigned int flags, const struct timespec *timeout); }],
[370, AUE_SEMWAITSIGNAL,{ int __old_semwait_signal(int cond_sem, int mutex_sem, int timeout, int relative, const struct timespec *ts); }],
[371, AUE_SEMWAITSIGNAL,{ int __old_semwait_signal_nocancel(int cond_sem, int mutex_sem, int timeout, int relative, const struct timespec *ts) NO_SYSCALL_STUB; }],
[372, AUE_NULL,{ user_addr_t thread_selfid (void) NO_SYSCALL_STUB; }],
[380, AUE_MAC_EXECVE,{ int __mac_execve(char *fname, char **argp, char **envp, struct mac *mac_p); }],
[381, AUE_MAC_SYSCALL,{ int __mac_syscall(char *policy, int call, user_addr_t arg); }],
[382, AUE_MAC_GET_FILE,{ int __mac_get_file(char *path_p, struct mac *mac_p); }],
[383, AUE_MAC_SET_FILE,{ int __mac_set_file(char *path_p, struct mac *mac_p); }],
[384, AUE_MAC_GET_LINK,{ int __mac_get_link(char *path_p, struct mac *mac_p); }],
[385, AUE_MAC_SET_LINK,{ int __mac_set_link(char *path_p, struct mac *mac_p); }],
[386, AUE_MAC_GET_PROC,{ int __mac_get_proc(struct mac *mac_p); }],
[387, AUE_MAC_SET_PROC,{ int __mac_set_proc(struct mac *mac_p); }],
[388, AUE_MAC_GET_FD,{ int __mac_get_fd(int fd, struct mac *mac_p); }],
[389, AUE_MAC_SET_FD,{ int __mac_set_fd(int fd, struct mac *mac_p); }],
[390, AUE_MAC_GET_PID,{ int __mac_get_pid(pid_t pid, struct mac *mac_p); }],
[391, AUE_MAC_GET_LCID,{ int __mac_get_lcid(pid_t lcid, struct mac *mac_p); }],
[392, AUE_MAC_GET_LCTX,{ int __mac_get_lctx(struct mac *mac_p); }],
[393, AUE_MAC_SET_LCTX,{ int __mac_set_lctx(struct mac *mac_p); }],
[394, AUE_SETLCID,{ int setlcid(pid_t pid, pid_t lcid) NO_SYSCALL_STUB; }],
[395, AUE_GETLCID,{ int getlcid(pid_t pid) NO_SYSCALL_STUB; }],
[396, AUE_NULL,{ user_ssize_t read_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }],
[397, AUE_NULL,{ user_ssize_t write_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }],
[398, AUE_OPEN_RWTC,{ int open_nocancel(user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }],
[399, AUE_CLOSE,{ int close_nocancel(int fd) NO_SYSCALL_STUB; }],
[400, AUE_WAIT4,{ int wait4_nocancel(int pid, user_addr_t status, int options, user_addr_t rusage) NO_SYSCALL_STUB; }],
[401, AUE_RECVMSG,{ int recvmsg_nocancel(int s, struct msghdr *msg, int flags) NO_SYSCALL_STUB; }],
[402, AUE_SENDMSG,{ int sendmsg_nocancel(int s, caddr_t msg, int flags) NO_SYSCALL_STUB; }],
[403, AUE_RECVFROM,{ int recvfrom_nocancel(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr) NO_SYSCALL_STUB; }],
[404, AUE_ACCEPT,{ int accept_nocancel(int s, caddr_t name, socklen_t	*anamelen) NO_SYSCALL_STUB; }],
[405, AUE_MSYNC,{ int msync_nocancel(caddr_t addr, size_t len, int flags) NO_SYSCALL_STUB; }],
[406, AUE_FCNTL,{ int fcntl_nocancel(int fd, int cmd, long arg) NO_SYSCALL_STUB; }],
[407, AUE_SELECT,{ int select_nocancel(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv) NO_SYSCALL_STUB; }],
[408, AUE_FSYNC,{ int fsync_nocancel(int fd) NO_SYSCALL_STUB; }],
[409, AUE_CONNECT,{ int connect_nocancel(int s, caddr_t name, socklen_t namelen) NO_SYSCALL_STUB; }],
[410, AUE_NULL,{ int sigsuspend_nocancel(sigset_t mask) NO_SYSCALL_STUB; }],
[411, AUE_READV,{ user_ssize_t readv_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }],
[412, AUE_WRITEV,{ user_ssize_t writev_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }],
[413, AUE_SENDTO,{ int sendto_nocancel(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen) NO_SYSCALL_STUB; }],
[414, AUE_PREAD,{ user_ssize_t pread_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }],
[415, AUE_PWRITE,{ user_ssize_t pwrite_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }],
[416, AUE_WAITID,{ int waitid_nocancel(idtype_t idtype, id_t id, siginfo_t *infop, int options) NO_SYSCALL_STUB; }],
[417, AUE_POLL,{ int poll_nocancel(struct pollfd *fds, u_int nfds, int timeout) NO_SYSCALL_STUB; }],
[418, AUE_MSGSND,{ int msgsnd_nocancel(int msqid, void *msgp, size_t msgsz, int msgflg) NO_SYSCALL_STUB; }],
[419, AUE_MSGRCV,{ user_ssize_t msgrcv_nocancel(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg) NO_SYSCALL_STUB; }],
[420, AUE_SEMWAIT,{ int sem_wait_nocancel(sem_t *sem) NO_SYSCALL_STUB; }],
[421, AUE_NULL,{ int aio_suspend_nocancel(user_addr_t aiocblist, int nent, user_addr_t timeoutp) NO_SYSCALL_STUB; }],
[422, AUE_SIGWAIT,{ int __sigwait_nocancel(user_addr_t set, user_addr_t sig) NO_SYSCALL_STUB; }],
[423, AUE_SEMWAITSIGNAL,{ int __semwait_signal_nocancel(int cond_sem, int mutex_sem, int timeout, int relative, int64_t tv_sec, int32_t tv_nsec) NO_SYSCALL_STUB;}],
[424, AUE_MAC_MOUNT,{ int __mac_mount(char *type, char *path, int flags, caddr_t data, struct mac *mac_p); }],
[425, AUE_MAC_GET_MOUNT,{ int __mac_get_mount(char *path, struct mac *mac_p); }],
[426, AUE_MAC_GETFSSTAT,{ int __mac_getfsstat(user_addr_t buf, int bufsize, user_addr_t mac, int macsize, int flags); }],
[427, AUE_FSGETPATH,{ user_ssize_t fsgetpath(user_addr_t buf, size_t bufsize, user_addr_t fsid, uint64_t objid) NO_SYSCALL_STUB; }, { private fsgetpath (File Manager SPI) }],
[428, AUE_NULL,{ mach_port_name_t audit_session_self(void); }],
[429, AUE_NULL,{ int audit_session_join(mach_port_name_t port); }],
