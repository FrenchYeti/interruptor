import * as DEF from "../kernelapi/LinuxArm64Flags.js";
import {TypedData, TypedDataMap} from "../common/TypedData.js";
import {L, SyscallOutMap, SyscallSignature, T} from "../common/Types.js";

const E = DEF.E;
const X = DEF.X;
const _ = TypedData.from;

export enum ARCH_VARIANT_BASE {
    EABI= 0,
    OABI= 9437184
};

// internal structs are always parsed
export const IDSTRUCTS = {};

// arguments template
const A:TypedDataMap = {
    DFD: _({t: T.INT32, n:"dfd", l:L.DFD}),
    OLD_DFD: _({t: T.INT32, n:"old_dfd", l:L.DFD}),
    NEW_DFD: _({t: T.INT32, n:"new_dfd", l:L.DFD}),
    FD: _({t:T.UINT32, n:"fd", l:L.FD}),
    FD_SET: _({t:T.POINTER64, n:"fd_set*", l:L.BUFFER, f:"FD" }),
    SOCKFD: _({t:T.UINT32, n:"sockfd", l:L.SOCKFD}),
    EPFD: _({t:T.UINT32, n:"epfd", l:L.EPFD}),
    AIO: _({t:T.ULONG, n:"aio_context_t ctx_id"}),
    LFD: _({t:T.ULONG, n:"fd", l:L.FD}),
    CONST_PATH: _({t:T.STRING, n:"path", l:L.PATH, c:true}),
    CONST_NAME: _({t:T.STRING, n:"name", c:true}),
    STR: _({t:T.STRING, n:"char*"}),
    OLD_NAME: _({t:T.CHAR_BUFFER, n:"old_name", c:true}),
    NEW_NAME: _({t:T.CHAR_BUFFER, n:"new_name", c:true}),
    CONST_FNAME: _({t:T.STRING, n:"filename", c:true}),
    SIZE: _({t:T.UINT32, n:"size", l:L.SIZE}),
    LEN: _({t:T.ULONG, n:"length", l:L.SIZE}),
    OFFSET: _({t:T.UINT32, n:"offset", l:L.SIZE}),
    LOFFSET: _({t:T.ULONG, n:"offset", l:L.SIZE}),
    SIGNED_LEN: _({t:T.LONG, n:"length", l:L.SIZE}),
    XATTR: _({t:T.INT32, n:"flags", l:L.FLAG, f:X.XATTR }),
    XATTR_LIST: _({t:T.CHAR_BUFFER, n:"list", l:L.XATTR_LIST, r:2}),
    PID: _({t:T.INT32, n:"pid", l:L.PID }),
    SCHED_POLICY: _({t:T.UINT32, n:"policy", l:L.FLAG, f:X.SCHED}),
    UID: _({t:T.UINT32, n:"user", l:L.UID }),
    GID: _({t:T.UINT32, n:"group", l:L.GID }),
    SIG: _({t:T.INT32, n:"sig", l:L.FLAG, f:X.SIG   }),
    TID: _({t:T.INT32, n:"thread" }),
    CALLER_TID: _({t:T.INT32, n:"caller_tid" }),
    PTR: _({t:T.POINTER64, n:"value"}),
    START_ADDR: _({t:T.POINTER64, n:"start_addr", l:L.VADDR, f:X.RANGE}),
    ADDR: _({t:T.POINTER64, n:"addr", l:L.VADDR, f:X.RANGE}),
    CONST_PTR: _({t:T.POINTER64, n:"value", c:true}),
    MPROT: _({t:T.INT32, n:"prot", l:L.FLAG, f:X.MPROT}),
    FMODE: _({t:T.INT32, n:"mode", l:L.FLAG, f:X.F_MODE}),
    CLKID: _({t:T.INT32, n:"clockid", l:L.FLAG, f:X.CLK}),
    WD: _({t:T.INT32, n:"wd", l:L.WD}),
    OUTPUT_CHAR_BUFFER: _({t:T.POINTER64, n:"buf", l:L.OUTPUT_BUFFER}),
    OUTPUT_BUFFER_LEN: _({t:T.INT32, n:"size", l:L.SIZE}),
    IOPRIO_WHICH: _({ t:T.INT32, n:"which", l:L.FLAG, r:"x1", f:X.IOPRIO_WHICH }),
    ACCESS_FLAGS: _({t:T.INT32, n:"flag", l:L.FLAG, f:X.ACCESS_FLAGS}),
    PKEY: _({ t:T.INT32, n:"pkey", l:L.PKEY}),
    RWF: _({t:T.INT32, n:"rwf", l:L.FLAG, f:X.RWF}),
    SIGMASK: _({t:T.POINTER64, n:"sigmask", l:L.BUFFER}),
    TIMER: _({ t:T.INT32, n:"which", l:L.FLAG, f:X.TIMER}),
    TIMER_PTR: _({ t:T.POINTER64, n:"timer_id*", l:L.TIMER}),
    PERSO: _({ t:T.UINT32, n:"personna", l:L.FLAG, f:X.PERSO}),
    RES: _({ t:T.UINT32, n:"resource", l:L.FLAG, f:X.RES}),
    OFLAGS: _({t:T.UINT32, n:"flags", l:L.FLAG, f:X.O_MODE}),
    OMODE: _({t:T.UINT32, n:"mode", l:L.FLAG, f:X.UMASK}),
    MQD: _({ t:T.INT32, n:"mod_t mqdes", l:L.MQDES}),
    MQID: _({ t:T.INT32, n:"msqid" }),
    SEMID: _({ t:T.INT32, n:"semid" }),
    EPEV: _({t:T.POINTER64, n:"struct epoll_event *event", l:L.FLAG, f:X.EPOLL_EV}),
    COUNT: _({t:T.UINT32, n:"count", l:L.SIZE}),

    POLLFD: _({ t:T.INT32, n:"*pollfd", l:L.DSTRUCT, f:"pollfd" }),
    KERNEL_TIMESPEC: _({t:T.POINTER64, n:"*__kernel_timespec", l:L.DSTRUCT, f:"__kernel_timespec"} ),
    CONST_KERNEL_TIMESPEC: _({t:T.POINTER64, n:"*__kernel_timespec", l:L.DSTRUCT, f:"__kernel_timespec", c:true} ),
    IOVEC: _({t:T.POINTER64, n:"*iovec", l:L.DSTRUCT, f:"iovec", c:true}),
    IOCB: _({t:T.POINTER64, n:"*iocb", l:L.DSTRUCT, f:"iocb"} ),
    IOEV: _({t:T.POINTER64, n:"*io_event", l:L.DSTRUCT, f:"io_event"} ),
    SCHED_PARAM: _({t:T.POINTER64, n:"*sched_param", l:L.DSTRUCT, f:"sched_param"}),
    SCHED_ATTR: _({t:T.POINTER64, n:"*attr", l:L.DSTRUCT, f:"sched_attr"} ),
    STATBUF: _({t:T.POINTER64, n:"*statbuf", l:L.DSTRUCT, f:"__old_kernel_stat"}),
    ITIMERVAL: _({t:T.POINTER64, n:"*itimerval", l:L.DSTRUCT, f:"itimerval"}),
    ITIMERSPEC: _({t:T.POINTER64, n:"*itimerspec", l:L.DSTRUCT, f:"__kernel_itimerspec"}),
    SIGINFO: _({t:T.POINTER64, n:"*siginfo", l:L.DSTRUCT, f:"siginfo"}),
    TMS: _({t:T.POINTER64, n:"*tbuf", l:L.DSTRUCT, f:"tms"}),
    RUSAGE: _({t:T.POINTER64, n:"*tbuf", l:L.DSTRUCT, f:"rusage"}),
    RLIMIT: _({t:T.POINTER64, n:"**rlim", l:L.DSTRUCT, f:"rlimit"}),
    ROBUST_LH: _({t:T.POINTER64, n:"*head", l:L.DSTRUCT, f:"robust_list_head"}),
    KEXSEG: _({t:T.POINTER64, n:"*segments", l:L.DSTRUCT, f:"kexec_segment"}),
    SIGEVENT: _({t:T.POINTER64, n:"*notification", l:L.DSTRUCT, f:"sigevent"}),
    SIGALSTACK: _({t:T.POINTER64, n:"*uss", l:L.DSTRUCT, f:"sigaltstack"}),
    SIGACTION: _({t:T.POINTER64, n:"*sigaction", l:L.DSTRUCT, f:"sigaction"}),
    TIMEVAL: _({t:T.POINTER64, n:"*timeval", l:L.DSTRUCT, f:"timeval"}),
    TIMEZONE: _({t:T.POINTER64, n:"*timezone", l:L.DSTRUCT, f:"timezone"}),
    KTIMEX: _({t:T.POINTER64, n:"*txc", l:L.DSTRUCT, f:"__kernel_timex"}),
    SYSINFO: _({t:T.POINTER64, n:"*sysinfo", l:L.DSTRUCT, f:"sysinfo"}),
    MQ_ATTR: _({t:T.POINTER64, n:"*mq_attr", l:L.DSTRUCT, f:"mq_attr"}),
    MSGBUFF: _( {t:T.POINTER64, n:"*msgbuf", l:L.DSTRUCT, f:"msgbuf"} ),
    CAP_USR_HEADER: _({t:T.POINTER64, n:"*cap_header", l:L.DSTRUCT, f:"cap_user_header_t"}),
    CAP_USR_DATA: _({t:T.POINTER64, n:"*cap_data", l:L.DSTRUCT, f:"cap_user_data_t"}),
    GPU_CACHE: _({t:T.POINTER64, n:"*getcpu_cache", l:L.DSTRUCT, f:"getcpu_cache"}),
    SEMBUF: _({t:T.POINTER64, n:"*sops", l:L.DSTRUCT, f:"sembuf"}),
    SOCKADDR: _( {t:T.POINTER64, n:"*addr", l:L.DSTRUCT, f:"sock_addr"}),
    FILE_HANDLE: _({t:T.POINTER64, n:"*handle", l:L.DSTRUCT, f:"file_handle"}),
    MSGBUF: _({t:T.POINTER64, n:"*msgb", l:L.DSTRUCT, f:"msgbuf"} ),
    USR_MSGHDR: _({t:T.POINTER64, n:"*msg", l:L.DSTRUCT, f:"user_msghdr"} ),
    RLIMIT64: _( {t:T.POINTER64, n:"*rlim", l:L.DSTRUCT, f:"rlimit64"}),
    SHMIDDS: _( {t:T.POINTER64, n:"*buf", l:L.DSTRUCT, f:"shmid_ds"}),
    MMSGHDR: _( {t:T.POINTER64, n:"*msg", l:L.DSTRUCT, f:"mmsghdr"}),
    PERFEVTATTR: _( {t:T.POINTER64, n:"*attr_uptr", l:L.DSTRUCT, f:"perf_event_attr"}),
    STATX: _( {t:T.POINTER64, n:"*buffer", l:L.DSTRUCT, f:"statx"}),
    USTAT: _( {t:T.POINTER64, n:"*ubuf", l:L.DSTRUCT, f:"ustat"})
}

A.SIGMASK.update({ f:A.SIG, len:16 });

const RET:SyscallOutMap = {
    INFO: {t:T.INT32, e:[E.EAGAIN,E.EINVAL,E.EPERM]},
    ACCESS: {t:T.INT32, e:[E.EACCES, E.EFAULT, E.EINVAL, E.ELOOP, E.ENAMETOOLONG, E.ENOENT, E.ENOMEM, E.ENOTDIR, E.EOVERFLOW, E.EIO, E.ETXTBSY, E.EROFS]},
    STAT: {t:T.INT32, e:[E.EACCES, E.EBADF, E.EFAULT, E.EINVAL, E.ELOOP, E.ENAMETOOLONG, E.ENOENT, E.ENOMEM, E.ENOTDIR, E.EOVERFLOW]},
    LINK: {t:T.INT32, e:[E.EACCES,E.EEXIST, E.EFAULT, E.EIO, E.ELOOP, E.EMLINK, E.ENAMETOOLONG, E.ENOENT, E.ENOMEM, E.ENOSPC,E.ENOTDIR, E.EPERM,E.EROFS,E.EXDEV] },
    OPEN: {t:T.INT32, e:[E.EACCES,E.EEXIST, E.EFAULT, E.ENODEV, E.ENOENT, E.ENOMEM, E.ENOSPC, E.ENOTDIR, E.ENXIO, E.EPERM, E.EROFS, E.ETXTBSY,  E.EFBIG, E.EINTR, E.EISDIR, E.ELOOP, E.ENAMETOOLONG, E.EMFILE,E.ENFILE,E.ENOMEM]},
}

RET.VADDR = {t:T.INT32, n:'addr', l:L.VADDR, e:[ E.EACCES, E.EAGAIN, E.EBADF, E.EINVAL, E.ENFILE, E.ENODEV, E.ENOMEM, E.ETXTBSY]};
RET.SET_XATTR = {t:T.INT32, e:RET.STAT.e.concat([E.EDQUOT, E.EEXIST, E.ENODATA, E.ENOSPC, E.ENOTSUP, E.EPERM, E.ERANGE]) };
RET.GET_XATTR = {t:T.INT32, e:RET.STAT.e.concat([E.E2BIG, E.ENODATA, E.ENOTSUP, E.ERANGE]) };
RET.LS_XATTR = {t:T.INT32, e:RET.STAT.e.concat([E.E2BIG, E.ENOTSUP, E.ERANGE]) };
RET.RM_XATTR = {t:T.INT32, e:RET.STAT.e.concat([E.ENOTSUP, E.ERANGE]) };
RET.OPENAT = {t:T.INT32, n:'FD', l:L.FD, r:1, e:RET.OPEN.e.concat([E.EBADF, E.ENOTDIR]) };
RET.LINKAT = {t:T.INT32, e:RET.LINK.e.concat([E.EBADF, E.ENOTDIR]) };
RET.IO = {t:T.INT32, e:RET.INFO.e.concat([E.EBADF, E.EFAULT, E.ENOSYS]) };


export const SWI:SyscallSignature[] = [
    [0,"restart_syscall",0x00,[]],
    [1,"exit",0x01,[{ t:T.INT32, n:"error_code" }]],
    [2,"fork",0x02,[]],
    [3,"read",0x03,[A.FD,A.OUTPUT_CHAR_BUFFER,A.SIZE]],
    [4,"write",0x04,[A.FD,A.CONST_CHAR_BUFFER,A.SIZE]],
    [5,"open",0x05,[ A.CONST_FNAME,A.OFLAGS,A.OMODE],RET.OPENAT],
    [6,"close",0x06,[A.FD]],
    [7,"not implemented",0x07,[]],
    [8,"creat",0x08,[ A.CONST_PATH,A.OMODE],RET.OPENAT],
    [9,"link",0x09,[A.OLD_NAME,A.NEW_NAME]],
    [10,"unlink",0x0a,[ A.CONST_PATH]],
    [11,"execve",0x0b,[{t:T.STRING, n:"filename", c:true},{t:T.STRING, n:"*argv", c:true},{t:T.STRING, n:"*envp", c:true}]],
    [12,"chdir",0x0c,[ A.CONST_FNAME]],
    [13,"not implemented",0x0d,[]],
    [14,"mknod",0x0e,[ A.CONST_FNAME,{t:T.INT32, n:"umode", l:L.FLAG, f:X.NODMODE, r:"x3" },{t:T.INT32, n:"dev", l:L.DEV }]],
    [15,"chmod",0x0f,[ A.CONST_FNAME,{t:T.USHORT, n:"mode", l:L.ATTRMODE, f:X.ATTR}]],
    [16,"lchown",0x10,[ A.CONST_FNAME,A.UID,A.GID]],
    [17,"not implemented",0x11,[]],
    [18,"not implemented",0x12,[]],
    [19,"lseek",0x13,[A.FD,A.OFFSET,{t:T.UINT32, n:"whence", l:L.FLAG, f:X.SEEK}]],
    [20,"getpid",0x14,[],A.PID.asReturn()],
    [21,"mount",0x15,[A.STR.copy("dev_name"), A.STR.copy("dir_name"), A.STR.copy("type"),{t:T.ULONG, n:"flags", l:L.FLAG, f:X.MOUNT_FLAG},{t:T.POINTER64, n:"*dat"}]],
    [22,"not implemented",0x16,[]],
    [23,"setuid",0x17,[A.UID]],
    [24,"getuid",0x18,[]],
    [25,"not implemented",0x19,[]],
    [26,"ptrace",0x1a,[{t:T.LONG, n:"request", l:L.FLAG, f:X.PTRACE },{t:T.LONG, n:"pid", l:L.PID },A.ADDR,{t:T.POINTER64, n:"data", l:L.PTRACE, r:"x1", f:X.PTRACE_DATA }]],
    [27,"not implemented",0x1b,[]],
    [28,"not implemented",0x1c,[]],
    [29,"pause",0x1d,[]],
    [30,"not implemented",0x1e,[]],
    [31,"not implemented",0x1f,[]],
    [32,"not implemented",0x20,[]],
    [33,"access",0x21,[ A.CONST_FNAME,"int mode"]],
    [34,"nice",0x22,[{ t:T.INT32, n:"increment"}],{t:T.INT32, e:[E.EPERM]}], // CAP_SYS_NICE
    [35,"not implemented",0x23,[]],
    [36,"sync",0x24,[]],
    [37,"kill",0x25,[A.PID,A.SIG]],
    [38,"rename",0x26,[A.OLD_NAME,A.NEW_NAME]],
    [39,"mkdir",0x27,[ A.CONST_PATH,A.XATTR.copy("umode")]],
    [40,"rmdir",0x28,[ A.CONST_PATH]],
    [41,"dup",0x29,[A.FD],A.FD.asReturn( [E.EBADF, E.EBUSY, E.EINTR, E.EINVAL, E.EMFILE])],
    [42,"pipe",0x2a,[{t:T.POINTER64, n:"pipefd", l:L.PIPEFD}]],
    [43,"times",0x2b,[A.TMS]],
    [44,"not implemented",0x2c,[]],
    [45,"brk",0x2d,[A.ADDR.copy("*end_data_seg")]],
    [46,"setgid",0x2e,[A.GID]],
    [47,"getgid",0x2f,[]],
    [48,"not implemented",0x30,[]],
    [49,"geteuid",0x31,[]],
    [50,"getegid",0x32,[]],
    [51,"acct",0x33,[A.CONST_NAME]],
    [52,"umount2",0x34,[]],
    [53,"not implemented",0x35,[]],
    [54,"ioctl",0x36,[ A.FD,{t:T.UINT32, n:"cmd"},{t:T.ULONG, n:"arg"}]],
    [55,"fcntl",0x37,[A.FD,{t:T.UINT32, n:"cmd", l:L.FLAG, f:X.FNCTL} ,{t:T.ULONG, n:"args", l:L.FLAG, r:"r1", f:X.FCNTL_ARGS}]],
    [56,"not implemented",0x38,[]],
    [57,"setpgid",0x39,[A.PID,{t:T.INT32, n:"pgid", l:L.PID }]],
    [58,"not implemented",0x3a,[]],
    [59,"not implemented",0x3b,[]],
    [60,"umask",0x3c,[{t:T.INT32, n:"mask", l:L.ATTRMODE, f:X.ATTR}]],
    [61,"chroot",0x3d,[ A.CONST_FNAME]],
    [62,"ustat",0x3e,[{t:T.UINT32, n:"dev", l:L.DEV },A.USTAT]],
    [63,"dup2",0x3f,[ A.FD.copy("oldfd"), A.FD.copy("newfd") ]],
    [64,"getppid",0x40,[],A.PID.asReturn()],
    [65,"getpgrp",0x41,[],A.PID.asReturn()],
    [66,"setsid",0x42,[],A.PID.asReturn()],
    [67,"sigaction",0x43,[A.SIG,A.SIGACTION.copy().constant(),A.SIGACTION]],
    [68,"not implemented",0x44,[]],
    [69,"not implemented",0x45,[]],
    [70,"setreuid",0x46,[A.RUID,A.EUID]],
    [71,"setregid",0x47,[A.GID.copy("rgid"),A.GID.copy("egid")]],
    [72,"sigsuspend",0x48,["int unused1","int unused2","old_sigset_t mask"]],
    [73,"sigpending",0x49,["old_sigset_t *uset"]],
    [74,"sethostname",0x4a,[{t:T.CHAR_BUFFER, n:"name"},{t:T.UINT32, n:"length"}]],
    [75,"setrlimit",0x4b,[A.RES,A.RLIMIT]],
    [76,"not implemented",0x4c,[]],
    [77,"getrusage",0x4d,[{t:T.INT32, n:"who", l:L.ATTRMODE, f:X.RUSAGE},A.RUSAGE]],
    [78,"gettimeofday",0x4e,[A.TIMEVAL, A.TIMEZONE]],
    [79,"settimeofday",0x4f,[A.TIMEVAL, A.TIMEZONE]],
    [80,"getgroups",0x50,[A.SIZE,{t:T.POINTER64, n:"grouplist", l:L.GID}]],
    [81,"setgroups",0x51,[A.SIZE,{t:T.POINTER64, n:"grouplist", l:L.GID}],RET.INFO],
    [82,"not implemented",0x52,[]],
    [83,"symlink",0x53,[A.CONST_NAME.copy("oldname"),A.CONST_NAME.copy("newname")]],
    [84,"not implemented",0x54,[]],
    [85,"readlink",0x55,[A.CONST_PATH,A.OUTPUT_CHAR_BUFFER,"int bufsiz"]],
    [86,"uselib",0x56,[A.CONST_FNAME.copy("library")]],
    [87,"swapon",0x57,[A.CONST_FNAME,"int swap_flags"]],
    [88,"reboot",0x58,["int magic1","int magic2","unsigned int cmd","void *arg"]],
    [89,"not implemented",0x59,[]],
    [90,"not implemented",0x5a,[]],
    [91,"munmap",0x5b,["unsigned long addr","size_t len"]],
    [92,"truncate",0x5c,[A.CONST_PATH,"long length"]],
    [93,"ftruncate",0x5d,[A.FD,"unsigned long length"]],
    [94,"fchmod",0x5e,[A.FD,"umode_t mode"]],
    [95,"fchown",0x5f,[A.FD,"uid_t user","gid_t group"]],
    [96,"getpriority",0x60,["int which","int who"]],
    [97,"setpriority",0x61,["int which","int who","int niceval"]],
    [98,"not implemented",0x62,[]],
    [99,"statfs",0x63,["const char * path","struct statfs *buf"]],
    [100,"fstatfs",0x64,[A.FD,"struct statfs *buf"]],
    [101,"not implemented",0x65,[]],
    [102,"not implemented",0x66,[]],
    [103,"syslog",0x67,["int type",A.OUTPUT_CHAR_BUFFER,"int len"]],
    [104,"setitimer",0x68,["int which","struct itimerval *value","struct itimerval *ovalue"]],
    [105,"getitimer",0x69,["int which","struct itimerval *value"]],
    [106,"stat",0x6a,[ A.CONST_FNAME,"struct __old_kernel_stat *statbuf"]],
    [107,"lstat",0x6b,[ A.CONST_FNAME,"struct __old_kernel_stat *statbuf"]],
    [108,"fstat",0x6c,[A.FD,"struct __old_kernel_stat *statbuf"]],
    [109,"not implemented",0x6d,[]],
    [110,"not implemented",0x6e,[]],
    [111,"vhangup",0x6f,[]],
    [112,"not implemented",0x70,[]],
    [113,"not implemented",0x71,[]],
    [114,"wait4",0x72,[A.PID,"int *stat_addr","int options",A.RUSAGE]],
    [115,"swapoff",0x73,[A.CONST_NAME]],
    [116,"sysinfo",0x74,[A.SYSINFO], RET.FAULT],
    [117,"not implemented",0x75,[]],
    [118,"fsync",0x76,[A.FD]],
    [119,"sigreturn",0x77,[]],
    [120,"clone",0x78,["unsigned long","unsigned long","int *","int *","unsigned long"]],
    [121,"setdomainname",0x79,[{t:T.CHAR_BUFFER, n:"name"},{t:T.UINT32, n:"length"}]],
    [122,"uname",0x7a,[{t:T.POINTER64, n:" *utsname" }]],
    [123,"not implemented",0x7b,[]],
    [124,"adjtimex",0x7c,["struct __kernel_timex *txc_p"]],
    [125,"mprotect",0x7d,[A.ADDR,A.SIZE, A.MPROT]],
    [126,"sigprocmask",0x7e,["int how","old_sigset_t *set","old_sigset_t *oset"]],
    [127,"not implemented",0x7f,[]],
    [128,"init_module",0x80,["void *umod","unsigned long len","const char *uargs"]],
    [129,"delete_module",0x81,["const char *name_user","unsigned int flags"]],
    [130,"not implemented",0x82,[]],
    [131,"quotactl",0x83,["unsigned int cmd","const char *special","qid_t id","void *addr"]],
    [132,"getpgid",0x84,[A.PID]],
    [133,"fchdir",0x85,[A.FD]],
    [134,"bdflush",0x86,["int func","long data"]],
    [135,"sysfs",0x87,["int option","unsigned long arg1","unsigned long arg2"]],
    [136,"personality",0x88,[A.PERSO],A.PERSO.asReturn()],
    [137,"not implemented",0x89,[]],
    [138,"setfsuid",0x8a,[A.UID],RET.INFO],
    [139,"setfsgid",0x8b,[A.GID],RET.INFO],
    [140,"_llseek",0x8c,[]],
    [141,"getdents",0x8d,[{t:T.UINT32, n:"fd", l:L.FD},{t:T.POINTER64, n:"linux_dirent64 *dirent", l:L.DSTRUCT, f:"linux_dirent64"},A.SIZE]],
    [142,"_newselect",0x8e,[]],
    [143,"flock",0x8f,[A.FD,{t:T.UINT32, n:"ope", l:L.FLAG, f:X.FLOCK}]],
    [144,"msync",0x90,["unsigned long start","size_t len","int flags"]],
    [145,"readv",0x91,[A.LFD,"const struct iovec *vec","unsigned long vlen"]],
    [146,"writev",0x92,[A.LFD,"const struct iovec *vec","unsigned long vlen"]],
    [147,"getsid",0x93,[A.PID]],
    [148,"fdatasync",0x94,[A.FD]],
    [149,"_sysctl",0x95,[]],
    [150,"mlock",0x96,[A.ADDR,A.SIZE],{t:T.INT32, e:[E.EPERM,E.EINVAL,E.ENOMEM]}],
    [151,"munlock",0x97,[A.ADDR,A.SIZE],{t:T.INT32, e:[E.EPERM,E.EINVAL,E.ENOMEM]}],
    [152,"mlockall",0x98,[{t:T.INT32, n:"flags", l:L.FLAG, f:X.MCL}],{t:T.INT32, e:[E.EPERM,E.EINVAL,E.ENOMEM]}],
    [153,"munlockall",0x99,[]],
    [154,"sched_setparam",0x9a,[A.PID,A.SCHED_PARAM]],
    [155,"sched_getparam",0x9b,[A.PID,A.SCHED_PARAM]],
    [156,"sched_setscheduler",0x9c,[A.PID,A.SCHED_POLICY,A.SCHED_PARAM]],
    [157,"sched_getscheduler",0x9d,[A.PID]],
    [158,"sched_yield",0x9e,[]],
    [159,"sched_get_priority_max",0x9f,[A.SCHED_POLICY]],
    [160,"sched_get_priority_min",0xa0,[A.SCHED_POLICY]],
    [161,"sched_rr_get_interval",0xa1,[A.PID,A.KERNEL_TIMESPEC.copy("*interval")]],
    [162,"nanosleep",0xa2,[A.KERNEL_TIMESPEC.copy("*rqtp"),A.KERNEL_TIMESPEC.copy("*rmtp")]],
    [163,"mremap",0xa3,["unsigned long addr","unsigned long old_len","unsigned long new_len","unsigned long flags","unsigned long new_addr"]],
    [164,"setresuid",0xa4,[A.RUID,A.EUID,"uid_t suid"]],
    [165,"getresuid",0xa5,["uid_t *ruid","uid_t *euid","uid_t *suid"]],
    [166,"not implemented",0xa6,[]],
    [167,"not implemented",0xa7,[]],
    [168,"poll",0xa8,["struct pollfd *ufds","unsigned int nfds","int timeout"]],
    [169,"nfsservctl",0xa9,[]],
    [170,"setresgid",0xaa,["gid_t rgid","gid_t egid","gid_t sgid"]],
    [171,"getresgid",0xab,["gid_t *rgid","gid_t *egid","gid_t *sgid"]],
    [172,"prctl",0xac,["int option","unsigned long arg2","unsigned long arg3","unsigned long arg4","unsigned long arg5"]],
    [173,"rt_sigreturn",0xad,[]],
    [174,"rt_sigaction",0xae,["int","const struct sigaction *","struct sigaction *","size_t"]],
    [175,"rt_sigprocmask",0xaf,["int how","sigset_t *set","sigset_t *oset","size_t sigsetsize"]],
    [176,"rt_sigpending",0xb0,["sigset_t *set","size_t sigsetsize"]],
    [177,"rt_sigtimedwait",0xb1,["const sigset_t *uthese","siginfo_t *uinfo","const struct __kernel_timespec *uts","size_t sigsetsize"]],
    [178,"rt_sigqueueinfo",0xb2,[A.PID,A.SIG,"siginfo_t *uinfo"]],
    [179,"rt_sigsuspend",0xb3,["sigset_t *unewset","size_t sigsetsize"]],
    [180,"pread64",0xb4,[A.FD,A.OUTPUT_CHAR_BUFFER,A.SIZE,"loff_t pos"]],
    [181,"pwrite64",0xb5,[A.FD,"const char *buf",A.SIZE,"loff_t pos"]],
    [182,"chown",0xb6,[ A.CONST_FNAME,A.UID,A.GID]],
    [183,"getcwd",0xb7,[{t:T.CHAR_BUFFER, n:"path_buff", l:L.PATH},A.SIZE],{t:T.CHAR_BUFFER, n:"path_buff", l:L.PATH, e:[E.EACCES,E.EFAULT,E.EINVAL,E.ENOENT,E.ERANGE]}],
    [184,"capget",0xb8,[A.CAP_USR_HEADER, A.CAP_USR_DATA]],
    [185,"capset",0xb9,[A.CAP_USR_HEADER, A.CAP_USR_DATA]],
    [186,"sigaltstack",0xba,["const struct sigaltstack *uss","struct sigaltstack *uoss"]],
    [187,"sendfile",0xbb,["int out_fd","int in_fd","off_t *offset",A.SIZE]],
    [188,"not implemented",0xbc,[]],
    [189,"not implemented",0xbd,[]],
    [190,"vfork",0xbe,[]],
    [191,"ugetrlimit",0xbf,[]],
    [192,"mmap2",0xc0,[]],
    [193,"truncate64",0xc1,[A.CONST_PATH,A.LOFFSET.copy("lenght")]],
    [194,"ftruncate64",0xc2,[A.FD,"loff_t length"]],
    [195,"stat64",0xc3,[ A.CONST_FNAME,"struct stat64 *statbuf"]],
    [196,"lstat64",0xc4,[ A.CONST_FNAME,"struct stat64 *statbuf"]],
    [197,"fstat64",0xc5,[A.LFD,"struct stat64 *statbuf"]],
    [198,"lchown32",0xc6,[]],
    [199,"getuid32",0xc7,[],A.UID.asReturn()],
    [200,"getgid32",0xc8,[],A.GID.asReturn()],
    [201,"geteuid32",0xc9,[],A.UID.asReturn()],
    [202,"getegid32",0xca,[],A.GID.asReturn()],
    [203,"setreuid32",0xcb,[]],
    [204,"setregid32",0xcc,[]],
    [205,"getgroups32",0xcd,[]],
    [206,"setgroups32",0xce,[]],
    [207,"fchown32",0xcf,[]],
    [208,"setresuid32",0xd0,[]],
    [209,"getresuid32",0xd1,[]],
    [210,"setresgid32",0xd2,[]],
    [211,"getresgid32",0xd3,[]],
    [212,"chown32",0xd4,[]],
    [213,"setuid32",0xd5,[]],
    [214,"setgid32",0xd6,[]],
    [215,"setfsuid32",0xd7,[]],
    [216,"setfsgid32",0xd8,[]],
    [217,"getdents64",0xd9,[A.FD,"struct linux_dirent64 *dirent","unsigned int count"]],
    [218,"pivot_root",0xda,["const char *new_root","const char *put_old"]],
    [219,"mincore",0xdb,["unsigned long start","size_t len","unsigned char * vec"]],
    [220,"madvise",0xdc,["unsigned long start","size_t len","int behavior"]],
    [221,"fcntl64",0xdd,[A.FD,"unsigned int cmd","unsigned long arg"]],
    [222,"not implemented",0xde,[]],
    [223,"not implemented",0xdf,[]],
    [224,"gettid",0xe0,[]],
    [225,"readahead",0xe1,[A.FD,A.LOFFSET,A.SIZE]],
    [226,"setxattr",0xe2,[A.CONST_PATH,A.CONST_NAME,"const void *value",A.SIZE,"int flags"]],
    [227,"lsetxattr",0xe3,[A.CONST_PATH,A.CONST_NAME,"const void *value",A.SIZE,"int flags"]],
    [228,"fsetxattr",0xe4,[A.FD,A.CONST_NAME,"const void *value",A.SIZE,"int flags"]],
    [229,"getxattr",0xe5,[A.CONST_PATH,A.CONST_NAME,"void *value",A.SIZE]],
    [230,"lgetxattr",0xe6,[A.CONST_PATH,A.CONST_NAME,"void *value",A.SIZE]],
    [231,"fgetxattr",0xe7,[A.FD,A.CONST_NAME,"void *value",A.SIZE]],
    [232,"listxattr",0xe8,[A.CONST_PATH,"char *list",A.SIZE]],
    [233,"llistxattr",0xe9,[A.CONST_PATH,"char *list",A.SIZE]],
    [234,"flistxattr",0xea,[A.FD,"char *list",A.SIZE]],
    [235,"removexattr",0xeb,[A.CONST_PATH,A.CONST_NAME]],
    [236,"lremovexattr",0xec,[A.CONST_PATH,A.CONST_NAME]],
    [237,"fremovexattr",0xed,[A.FD,A.CONST_NAME]],
    [238,"tkill",0xee,[A.PID,A.SIG]],
    [239,"sendfile64",0xef,["int out_fd","int in_fd","loff_t *offset",A.SIZE]],
    [240,"futex",0xf0,["u32 *uaddr","int op","u32 val","struct __kernel_timespec *utime","u32 *uaddr2","u32 val3"]],
    [241,"sched_setaffinity",0xf1,[A.PID,"unsigned int len","unsigned long *user_mask_ptr"]],
    [242,"sched_getaffinity",0xf2,[A.PID,"unsigned int len","unsigned long *user_mask_ptr"]],
    [243,"io_setup",0xf3,["unsigned nr_reqs","aio_context_t *ctx"]],
    [244,"io_destroy",0xf4,["aio_context_t ctx"]],
    [245,"io_getevents",0xf5,["aio_context_t ctx_id","long min_nr","long nr","struct io_event *events","struct __kernel_timespec *timeout"]],
    [246,"io_submit",0xf6,["aio_context_t","long","struct iocb * *"]],
    [247,"io_cancel",0xf7,["aio_context_t ctx_id","struct iocb *iocb","struct io_event *result"]],
    [248,"exit_group",0xf8,[{ t:T.INT32, n:"error_code" }]],
    [249,"lookup_dcookie",0xf9,["u64 cookie64",A.OUTPUT_CHAR_BUFFER,"size_t len"]],
    [250,"epoll_create",0xfa,["int size"]],
    [251,"epoll_ctl",0xfb,["int epfd","int op",A.FD,"struct epoll_event *event"]],
    [252,"epoll_wait",0xfc,["int epfd","struct epoll_event *events","int maxevents","int timeout"]],
    [253,"remap_file_pages",0xfd,["unsigned long start","unsigned long size","unsigned long prot","unsigned long pgoff","unsigned long flags"]],
    [254,"not implemented",0xfe,[]],
    [255,"not implemented",0xff,[]],
    [256,"set_tid_address",0x100,["int *tidptr"]],
    [257,"timer_create",0x101,["clockid_t which_clock","struct sigevent *timer_event_spec","timer_t * created_timer_id"]],
    [258,"timer_settime",0x102,["timer_t timer_id","int flags","const struct __kernel_itimerspec *new_setting","struct __kernel_itimerspec *old_setting"]],
    [259,"timer_gettime",0x103,["timer_t timer_id","struct __kernel_itimerspec *setting"]],
    [260,"timer_getoverrun",0x104,["timer_t timer_id"]],
    [261,"timer_delete",0x105,["timer_t timer_id"]],
    [262,"clock_settime",0x106,["clockid_t which_clock","const struct __kernel_timespec *tp"]],
    [263,"clock_gettime",0x107,["clockid_t which_clock","struct __kernel_timespec *tp"]],
    [264,"clock_getres",0x108,["clockid_t which_clock","struct __kernel_timespec *tp"]],
    [265,"clock_nanosleep",0x109,["clockid_t which_clock","int flags","const struct __kernel_timespec *rqtp","struct __kernel_timespec *rmtp"]],
    [266,"statfs64",0x10a,[A.CONST_PATH,"size_t sz","struct statfs64 *buf"]],
    [267,"fstatfs64",0x10b,[A.FD,"size_t sz","struct statfs64 *buf"]],
    [268,"tgkill",0x10c,["pid_t tgid",A.PID,A.SIG]],
    [269,"utimes",0x10d,["char *filename","struct timeval *utimes"]],
    [270,"arm_fadvise64_64",0x10e,[]],
    [271,"pciconfig_iobase",0x10f,["long which","unsigned long bus","unsigned long devfn"]],
    [272,"pciconfig_read",0x110,["unsigned long bus","unsigned long dfn","unsigned long off","unsigned long len","void *buf"]],
    [273,"pciconfig_write",0x111,["unsigned long bus","unsigned long dfn","unsigned long off","unsigned long len","void *buf"]],
    [274,"mq_open",0x112,[A.CONST_NAME,"int oflag","umode_t mode","struct mq_attr *attr"]],
    [275,"mq_unlink",0x113,[A.CONST_NAME]],
    [276,"mq_timedsend",0x114,["mqd_t mqdes","const char *msg_ptr","size_t msg_len","unsigned int msg_prio","const struct __kernel_timespec *abs_timeout"]],
    [277,"mq_timedreceive",0x115,["mqd_t mqdes","char *msg_ptr","size_t msg_len","unsigned int *msg_prio","const struct __kernel_timespec *abs_timeout"]],
    [278,"mq_notify",0x116,["mqd_t mqdes","const struct sigevent *notification"]],
    [279,"mq_getsetattr",0x117,["mqd_t mqdes","const struct mq_attr *mqstat","struct mq_attr *omqstat"]],
    [280,"waitid",0x118,["int which",A.PID,"struct siginfo *infop","int options","struct rusage *ru"]],
    [281,"socket",0x119,["int","int","int"]],
    [282,"bind",0x11a,["int","struct sockaddr *","int"]],
    [283,"connect",0x11b,["int","struct sockaddr *","int"]],
    [284,"listen",0x11c,["int","int"]],
    [285,"accept",0x11d,["int","struct sockaddr *","int *"]],
    [286,"getsockname",0x11e,["int","struct sockaddr *","int *"]],
    [287,"getpeername",0x11f,["int","struct sockaddr *","int *"]],
    [288,"socketpair",0x120,["int","int","int","int *"]],
    [289,"send",0x121,["int","void *","size_t","unsigned"]],
    [290,"sendto",0x122,["int","void *","size_t","unsigned","struct sockaddr *","int"]],
    [291,"recv",0x123,["int","void *","size_t","unsigned"]],
    [292,"recvfrom",0x124,["int","void *","size_t","unsigned","struct sockaddr *","int *"]],
    [293,"shutdown",0x125,["int","int"]],
    [294,"setsockopt",0x126,[A.FD,"int level","int optname","char *optval","int optlen"]],
    [295,"getsockopt",0x127,[A.FD,"int level","int optname","char *optval","int *optlen"]],
    [296,"sendmsg",0x128,[A.FD,"struct user_msghdr *msg","unsigned flags"]],
    [297,"recvmsg",0x129,[A.FD,"struct user_msghdr *msg","unsigned flags"]],
    [298,"semop",0x12a,[A.SEMID,"struct sembuf *sops","unsigned nsops"]],
    [299,"semget",0x12b,["key_t key","int nsems","int semflg"]],
    [300,"semctl",0x12c,[A.SEMID,"int semnum","int cmd","unsigned long arg"]],
    [301,"msgsnd",0x12d,[A.MQID,A.MSGBUF ,A.SIZE.copy("msgsz"),{t:T.INT32, n:"msgflg", l:L.FLAG, f:X.MSGF}]],
    [302,"msgrcv",0x12e,[A.MQID,A.MSGBUF ,A.SIZE.copy("msgsz"),"long msgtyp",{t:T.INT32, n:"msgflg", l:L.FLAG, f:X.MSGF}]],
    [303,"msgget",0x12f,["key_t key",{t:T.INT32, n:"msgflg", l:L.FLAG, f:X.MSGF}]],
    [304,"msgctl",0x130,[A.MQID,"int cmd","struct msqid_ds *buf"]],
    [305,"shmat",0x131,["int shmid","char *shmaddr","int shmflg"]],
    [306,"shmdt",0x132,["char *shmaddr"]],
    [307,"shmget",0x133,["key_t key",A.SIZE,"int flag"]],
    [308,"shmctl",0x134,["int shmid","int cmd","struct shmid_ds *buf"]],
    [309,"add_key",0x135,["const char *_type","const char *_description","const void *_payload","size_t plen","key_serial_t destringid"]],
    [310,"request_key",0x136,["const char *_type","const char *_description","const char *_callout_info","key_serial_t destringid"]],
    [311,"keyctl",0x137,["int cmd","unsigned long arg2","unsigned long arg3","unsigned long arg4","unsigned long arg5"]],
    [312,"semtimedop",0x138,[A.SEMID,"struct sembuf *sops","unsigned nsops","const struct __kernel_timespec *timeout"]],
    [313,"vserver",0x139,[]],
    [314,"ioprio_set",0x13a,[A.IOPRIO_WHICH,{t:T.INT32, n:"who"},{t:T.INT32, n:"ioprio"}]],
    [315,"ioprio_get",0x13b,[A.IOPRIO_WHICH,{t:T.INT32, n:"who"}]],
    [316,"inotify_init",0x13c,[]],
    [317,"inotify_add_watch",0x13d,[A.FD,A.CONST_PATH,"u32 mask"]],
    [318,"inotify_rm_watch",0x13e,[A.FD,"__s32 wd"]],
    [319,"mbind",0x13f,["unsigned long start","unsigned long len","unsigned long mode","const unsigned long *nmask","unsigned long maxnode","unsigned flags"]],
    [320,"get_mempolicy",0x140,["int *policy","unsigned long *nmask","unsigned long maxnode","unsigned long addr","unsigned long flags"]],
    [321,"set_mempolicy",0x141,["int mode","const unsigned long *nmask","unsigned long maxnode"]],
    [322,"openat",0x142,[A.DFD, A.CONST_FNAME,"int flags","umode_t mode"]],
    [323,"mkdirat",0x143,[A.DFD,"const char * pathname","umode_t mode"]],
    [324,"mknodat",0x144,[A.DFD,A.CONST_FNAME,"umode_t mode","unsigned dev"]],
    [325,"fchownat",0x145,[A.DFD, A.CONST_FNAME,"uid_t user","gid_t group","int flag"]],
    [326,"futimesat",0x146,[A.DFD, A.CONST_FNAME,"struct timeval *utimes"]],
    [327,"fstatat64",0x147,[A.DFD, A.CONST_FNAME,"struct stat64 *statbuf","int flag"]],
    [328,"unlinkat",0x148,[A.DFD,"const char * pathname","int flag"]],
    [329,"renameat",0x149,[A.OLD_DFD,A.OLD_NAME,"int newdfd","const char * newname"]],
    [330,"linkat",0x14a,[A.OLD_DFD,A.OLD_NAME,"int newdfd",A.NEW_NAME,"int flags"]],
    [331,"symlinkat",0x14b,[A.OLD_NAME,"int newdfd","const char * newname"]],
    [332,"readlinkat",0x14c,[A.DFD,A.CONST_PATH,A.OUTPUT_CHAR_BUFFER,"int bufsiz"]],
    [333,"fchmodat",0x14d,[A.DFD,A.CONST_FNAME,A.FMODE]],
    [334,"faccessat",0x14e,[A.DFD, A.CONST_FNAME,A.FMODE]],
    [335,"pselect6",0x14f,["int","fd_set *","fd_set *","fd_set *","struct __kernel_timespec *","void *"]],
    [336,"ppoll",0x150,["struct pollfd *","unsigned int","struct __kernel_timespec *","const sigset_t *","size_t"]],
    [337,"unshare",0x151,["unsigned long unshare_flags"]],
    [338,"set_robust_list",0x152,["struct robust_list_head *head","size_t len"]],
    [339,"get_robust_list",0x153,["int pid","struct robust_list_head * *head_ptr","size_t *len_ptr"]],
    [340,"splice",0x154,["int fd_in","loff_t *off_in","int fd_out","loff_t *off_out","size_t len","unsigned int flags"]],
    [341,"arm_sync_file_range",0x155,[]],
    [341,"sync_file_range2",0x155,[A.FD,"unsigned int flags",A.LOFFSET,"loff_t nbytes"]],
    [342,"tee",0x156,["int fdin","int fdout","size_t len","unsigned int flags"]],
    [343,"vmsplice",0x157,[A.FD,"const struct iovec *iov","unsigned long nr_segs","unsigned int flags"]],
    [344,"move_pages",0x158,[A.PID,"unsigned long nr_pages","const void * *pages","const int *nodes","int *status","int flags"]],
    [345,"getcpu",0x159,["unsigned *cpu","unsigned *node","struct getcpu_cache *cache"]],
    [346,"epoll_pwait",0x15a,["int epfd","struct epoll_event *events","int maxevents","int timeout","const sigset_t *sigmask","size_t sigsetsize"]],
    [347,"kexec_load",0x15b,["unsigned long entry","unsigned long nr_segments","struct kexec_segment *segments","unsigned long flags"]],
    [348,"utimensat",0x15c,[A.DFD, A.CONST_FNAME,"struct __kernel_timespec *utimes","int flags"]],
    [349,"signalfd",0x15d,["int ufd","sigset_t *user_mask","size_t sizemask"]],
    [350,"timerfd_create",0x15e,["int clockid","int flags"]],
    [351,"eventfd",0x15f,["unsigned int count"]],
    [352,"fallocate",0x160,[A.FD,"int mode",A.LOFFSET,"loff_t len"]],
    [353,"timerfd_settime",0x161,["int ufd","int flags","const struct __kernel_itimerspec *utmr","struct __kernel_itimerspec *otmr"]],
    [354,"timerfd_gettime",0x162,["int ufd","struct __kernel_itimerspec *otmr"]],
    [355,"signalfd4",0x163,["int ufd","sigset_t *user_mask","size_t sizemask","int flags"]],
    [356,"eventfd2",0x164,["unsigned int count","int flags"]],
    [357,"epoll_create1",0x165,["int flags"]],
    [358,"dup3",0x166,["unsigned int oldfd","unsigned int newfd","int flags"]],
    [359,"pipe2",0x167,["int *fildes","int flags"]],
    [360,"inotify_init1",0x168,["int flags"]],
    [361,"preadv",0x169,[A.LFD,"const struct iovec *vec","unsigned long vlen","unsigned long pos_l","unsigned long pos_h"]],
    [362,"pwritev",0x16a,[A.LFD,"const struct iovec *vec","unsigned long vlen","unsigned long pos_l","unsigned long pos_h"]],
    [363,"rt_tgsigqueueinfo",0x16b,["pid_t tgid",A.PID,A.SIG,"siginfo_t *uinfo"]],
    [364,"perf_event_open",0x16c,["struct perf_event_attr *attr_uptr",A.PID,"int cpu","int group_fd","unsigned long flags"]],
    [365,"recvmmsg",0x16d,[A.FD,"struct mmsghdr *msg","unsigned int vlen","unsigned flags","struct __kernel_timespec *timeout"]],
    [366,"accept4",0x16e,["int","struct sockaddr *","int *","int"]],
    [367,"fanotify_init",0x16f,["unsigned int flags","unsigned int event_f_flags"]],
    [368,"fanotify_mark",0x170,["int fanotify_fd","unsigned int flags","u64 mask",A.FD, A.CONST_PATH]],
    [369,"prlimit64",0x171,[A.PID,A.RES,"const struct rlimit64 *new_rlim","struct rlimit64 *old_rlim"]],
    [370,"name_to_handle_at",0x172,[A.DFD,A.CONST_NAME,"struct file_handle *handle","int *mnt_id","int flag"]],
    [371,"open_by_handle_at",0x173,["int mountdirfd","struct file_handle *handle","int flags"]],
    [372,"clock_adjtime",0x174,["clockid_t which_clock","struct __kernel_timex *tx"]],
    [373,"syncfs",0x175,[A.FD]],
    [374,"sendmmsg",0x176,[A.FD,"struct mmsghdr *msg","unsigned int vlen","unsigned flags"]],
    [375,"setns",0x177,[A.FD,"int nstype"]],
    [376,"process_vm_readv",0x178,[A.PID,"const struct iovec *lvec","unsigned long liovcnt","const struct iovec *rvec","unsigned long riovcnt","unsigned long flags"]],
    [377,"process_vm_writev",0x179,[A.PID,"const struct iovec *lvec","unsigned long liovcnt","const struct iovec *rvec","unsigned long riovcnt","unsigned long flags"]],
    [378,"kcmp",0x17a,["pid_t pid1","pid_t pid2","int type","unsigned long idx1","unsigned long idx2"]],
    [379,"finit_module",0x17b,[A.FD,"const char *uargs","int flags"]],
    [380,"sched_setattr",0x17c,[A.PID,"struct sched_attr *attr","unsigned int flags"]],
    [381,"sched_getattr",0x17d,[A.PID,"struct sched_attr *attr","unsigned int size","unsigned int flags"]],
    [382,"renameat2",0x17e,[A.OLD_DFD,A.OLD_NAME,"int newdfd",A.NEW_NAME,"unsigned int flags"]],
    [383,"seccomp",0x17f,["unsigned int op","unsigned int flags","void *uargs"]],
    [384,"getrandom",0x180,[A.OUTPUT_CHAR_BUFFER,A.SIZE,"unsigned int flags"]],
    [385,"memfd_create",0x181,["const char *uname_ptr","unsigned int flags"]],
    [386,"bpf",0x182,["int cmd","union bpf_attr *attr","unsigned int size"]],
    [387,"execveat",0x183,[A.DFD, A.CONST_FNAME,A.CONST_NAME.copy("*argv"),A.CONST_NAME.copy("*envp"),"int flags"]],
    [388,"userfaultfd",0x184,[A.OFLAGS]],
    [389,"membarrier",0x185,[{t:T.INT32, n:"cmd", l:L.FLAG, f:X.MEMBARRIER_CMD}, {t:T.INT32, n:"glag", l:L.FLAG, f:X.MEMBARRIER_FLAG}]],
    [390,"mlock2",0x186,[A.START_ADDR,A.SIZE,{t:T.UINT32, n:"flags", l:L.FLAG, f:X.MLOCK }]],
    [391,"copy_file_range",0x187,[A.FD.copy("fd_in"),A.LOFFSET.copy('*off_in'),A.FD.copy("fd_out"),A.LOFFSET.copy('*off_out'),A.SIZE,"unsigned int RESERVED flags"]],
    [392,"preadv2",0x188,[A.LFD,A.IOVEC,A.LEN,"unsigned long pos_l","unsigned long pos_h","rwf_t flags"]],
    [393,"pwritev2",0x189,[A.LFD,A.IOVEC,A.LEN,"unsigned long pos_l","unsigned long pos_h","rwf_t flags"]],
    [394,"pkey_mprotect",0x18a,[A.ADDR,A.SIZE,A.MPROT,A.PKEY]],
    [395,"pkey_alloc",0x18b,["unsigned long RESERVED flags",{t:T.ULONG, n:"access_rights", l:L.FLAG, f:X.PKEY_ACL }],A.PKEY.asReturn()],
    [396,"pkey_free",0x18c,[A.PKEY]],
    [397,"statx",0x18d,[A.DFD, A.CONST_PATH,A.ACCESS_FLAGS,"unsigned mask",A.STATX]],
    [983041,"ARM_breakpoint",0xf0001,[]],
    [983042,"ARM_cacheflush",0xf0002,[]],
    [983043,"ARM_usr26",0xf0003,[]],
    [983044,"ARM_usr32",0xf0004,[]],
    [983045,"ARM_set_tls",0xf0005,[]]
];